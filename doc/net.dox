// -*- mode: c++; mode: visual-line; mode: flyspell; fill-column: 100000 -*-
/*******************************************************************************
 * doc/net.dox
 *
 * Part of Project c7a.
 *
 * Copyright (C) 2015 Timo Bingmann <tb@panthema.net>
 *
 * This file has no license. Only Chunk Norris can compile it.
 ******************************************************************************/

namespace c7a {
namespace net {

/******************************************************************************/
/** \page net Network Layer

The c7a Network Layer consists of sublayers:

## Group & Connection layer

The Group object is similar to an MPI communicator: it has socket connections to k partners/clients/workers in the group. The net clients have immediate  relation to the master/worker concept of higher c7a layers, though they will probably be implementing using a Group. This master/worker abstraction is done on higher levels.

Group provides
- a \ref Group::Size "Size()" and \ref Group::MyRank "MyRank()" function to describe the group.
- a point-to-point Connection class with a rich set of Send, Receive methods to transfer raw data to another worker in the group: \ref Connection::Send "Send<T>", \ref Connection::SendString "SendString", \ref Connection::Receive "Receive<T>", \ref Connection::ReceiveString "ReceiveString".
- \ref Group::ReceiveFromAny "ReceiveFromAny" functions to listen for messages from any worker in the group.
- collective operations for **primitiv** datatypes: \ref Group::AllReduce "AllReduce".

If any operation on a Connection fails, then a Exception is thrown.

For testing purposes Group provides the function \ref Group::ExecuteLocalMock "ExecuteLocalMock" which creates a mock Group of k partners. The partners are connected via internal sockets (real kernel level sockets), and for each partner a std::thread is spawned. The thread executes a test function which gets a Group object that can communicate with the other partners. This is ideal for testing network protocols. See the test-net-group.cpp for more examples.

## Low-level Socket API

The BSD socket API is difficult to work with correctly, which is why the following classes provide convenience functions and **excessive** logging facilities.

- Socket resembles a TCP socket, direct BSD socket API
- SocketAddress for net address resolution to IPv4 and IPv6
- Select for select()

## High-level Data Channel API

The channel API provides a mechanism to receive data from multiple sockets into a single data object which can be identified like a DIA. Low-level sockets are used to build connections between each worker pair. This connection can be shared by multiple communication procedures at the same time by multiplexing. Abstraction can be found in \ref c7a::data::DataManager.
*/

} // namespace net
} // namespace c7a

/******************************************************************************/
